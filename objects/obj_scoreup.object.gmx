<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*obj_scoreup Create Event*/
scoreup=100;
time=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*obj_scoreup Create Event*/
//scoreup=100;
//time=0;

/*obj_scoreup Draw Event*/
/*Don't go outside view boundary*/if x&lt;view_xview+32{x=view_xview+32;}if x&gt;view_xview+view_wview-32{x=view_xview+view_wview-32;}if y&lt;view_yview+32{y=view_yview+32;}if y&gt;view_yview+view_hview-32{y=view_yview+view_hview-32;}
if time&lt;5{y=lerp(y,ystart+5,0.1);image_xscale=lerp(image_xscale,2,0.1);image_yscale=lerp(image_yscale,2,0.1);}else{y=lerp(y,ystart-32,0.1);image_xscale=lerp(image_xscale,1,0.1);image_yscale=lerp(image_yscale,1,0.1);}
//y-=1;
draw_set_halign(fa_center);
if scoreup="1-UP"{depth=-8888888;
draw_text_transformed_colour(x-2,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x+2,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y-2,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y+2,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_lime,c_lime,c_lime,c_lime,image_alpha);
}else
if scoreup="CHECKPOINT"{depth=-9999999;
draw_text_transformed_colour(x-2,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x+2,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y-2,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y+2,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_black,c_black,c_black,c_black,image_alpha);
draw_text_transformed_colour(x,y,string(scoreup),global.default_text_size*2,global.default_text_size*2,0,c_lime,c_lime,c_lime,c_lime,image_alpha);
}else{
global.hud_show_score=true;if instance_number(obj_camera)&gt;0{with(obj_camera){hud_show_score_timer=global.hud_show_timer;}}
depth=-9999999;
draw_text_transformed_colour(x-2,y,string(scoreup),global.default_text_size*image_xscale,global.default_text_size*image_yscale,0,c_white,c_white,c_white,c_white,image_alpha);
draw_text_transformed_colour(x+2,y,string(scoreup),global.default_text_size*image_xscale,global.default_text_size*image_yscale,0,c_white,c_white,c_white,c_white,image_alpha);
draw_text_transformed_colour(x,y-2,string(scoreup),global.default_text_size*image_xscale,global.default_text_size*image_yscale,0,c_white,c_white,c_white,c_white,image_alpha);
draw_text_transformed_colour(x,y+2,string(scoreup),global.default_text_size*image_xscale,global.default_text_size*image_yscale,0,c_white,c_white,c_white,c_white,image_alpha);
draw_text_transformed_colour(x,y,string(scoreup),global.default_text_size*image_xscale,global.default_text_size*image_yscale,0,c_black,c_black,c_black,c_black,image_alpha);}
time+=1;if time&gt;room_speed{image_alpha=lerp(image_alpha,0,0.1);if image_alpha&lt;=0{instance_destroy();}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
