<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Create Event*/

/*Create Foreground*/
if asset_get_type("obj_level_map_mbb")==asset_object and instance_number(obj_level_map_mbb)&lt;=0{instance_create(0,0,obj_level_map_mbb);}
if asset_get_type("obj_level_map_mbf")==asset_object and instance_number(obj_level_map_mbf)&lt;=0{instance_create(0,0,obj_level_map_mbf);}/*Create Foreground END*/

save_level_as_png=false;
allow_spawn_decorations=false;
can_spawn_player=false;

/*Default Views:   set_view_wview = 1024+400-32   set_view_hview = 768-32   */
set_view_wview=1392;set_view_hview=736;

/*Smooth the camera out even more*/view_wview_lerp=set_view_wview;view_hview_lerp=set_view_hview;/*Smooth the camera out even more END*/

/*Hud Variables*/
hud_show_lives=true;hud_show_lives_timer=0;
hud_show_coins=false;hud_show_coins_timer=0;
hud_show_starcoins=false;hud_show_starcoins_timer=0;
hud_show_score=false;hud_show_score_timer=0;
hud_show_time=false;hud_show_time_timer=0;
/*Hud Variables END*/

player_has_spawned=false;

/*Spawn Players*/
player1=noone;
player2=noone;
player3=noone;
player4=noone;
if asset_get_type("obj_player_map")==asset_object and instance_number(obj_player_map)&lt;1and asset_get_type("obj_player_ending_cutscene")==asset_object and instance_number(obj_player_ending_cutscene)&lt;1{
if global.playergame&gt;=0{player1=instance_create(x,y,obj_player)with(player1){player=1;}}
if global.playergame&gt;=1{player2=instance_create(x-sprite_width/4,y,obj_player)with(player2){player=2;}}
if global.playergame&gt;=2{player3=instance_create(x-sprite_width*2/4,y,obj_player)with(player3){player=3;}}
if global.playergame&gt;=3{player4=instance_create(x-sprite_width*3/4,y,obj_player)with(player4){player=4;}}
if room=room_leveleditor and global.actually_play_edited_level=true{player_has_spawned=true;}
}/*Spawn Players End*/

/*HUD Show Controls keys that have been pressed*/
player1_show_controls_timer=0;
player2_show_controls_timer=0;
player3_show_controls_timer=0;
player4_show_controls_timer=0;

player1_show_controls_alpha=0;
player2_show_controls_alpha=0;
player3_show_controls_alpha=0;
player4_show_controls_alpha=0;

/*Player 1*/player1_has_pressed_key_up=false;
player1_has_pressed_key_left=false;
player1_has_pressed_key_right=false;
player1_has_pressed_key_down=false;
player1_has_pressed_key_jump=false;
player1_has_pressed_key_dash=false;/*Player 1 END*/
/*Player 2*/player2_has_pressed_key_up=false;
player2_has_pressed_key_left=false;
player2_has_pressed_key_right=false;
player2_has_pressed_key_down=false;
player2_has_pressed_key_jump=false;
player2_has_pressed_key_dash=false;/*Player 2 END*/
/*Player 3*/player3_has_pressed_key_up=false;
player3_has_pressed_key_left=false;
player3_has_pressed_key_right=false;
player3_has_pressed_key_down=false;
player3_has_pressed_key_jump=false;
player3_has_pressed_key_dash=false;/*Player 3 END*/
/*Player 4*/player4_has_pressed_key_up=false;
player4_has_pressed_key_left=false;
player4_has_pressed_key_right=false;
player4_has_pressed_key_down=false;
player4_has_pressed_key_jump=false;
player4_has_pressed_key_dash=false;/*Player 4 END*/
/*HUD Show Controls keys that have been pressed END*/

depth=-room_height*room_width*99999;
xx=x;yy=y;
letterbox_top_y=view_yview;letterbox_bottom_y=room_height;show_letterbox=60;
iris_xscale=0;iris_yscale=0;
allow_iris=true;iris_zoom=0;

/*Initialize the view in the create event, if you do that in any other event the HTML5 version will result in a black screen*/
/*Initialize View*/
view_object=self;
/*View Size*/view_wview=1024+400-32;view_hview=768-32;/*View Size End*/

/*View Size*/
if os_type==os_ios or os_type==os_android{
if view_wport&gt;1920{view_wport=1920;}if view_wview&gt;1920-64{view_wview=1920-64;}if view_hport&gt;1080{view_hport=1080;}if view_hview&gt;1080-64{view_hview=1080-64;}
if view_wport&lt;640-320{view_wport=640;}if view_wview&lt;640{view_wview=640;}if view_hport&lt;480{view_hport=480;}if view_hview&lt;480{view_hview=480;}
}else{
if view_wport&gt;1920{view_wport=1920;}if view_wview&gt;1920{view_wview=1920;}if view_hport&gt;1080{view_hport=1080;}if view_hview&gt;1080{view_hview=1080;}
if view_wport&lt;640{view_wport=640;}if view_wview&lt;640{view_wview=640;}if view_hport&lt;480{view_hport=480;}if view_hview&lt;480{view_hview=480;}}
/*View Size End*/

/*View Border*/view_hborder=view_wview;view_vborder=view_hview;/*View Border End*/
/*Initialize View End*/

/*Initialize Background*/
background_x_offset[0]=background_x[0];background_y_offset[0]=background_y[0];
background_x_offset[1]=background_x[1];background_y_offset[1]=background_y[1];
background_x_offset[2]=background_x[2];background_y_offset[2]=background_y[2];
background_x_offset[3]=background_x[3];background_y_offset[3]=background_y[3];
background_x_offset[4]=background_x[4];background_y_offset[4]=background_y[4];
background_x_offset[5]=background_x[5];background_y_offset[5]=background_y[5];
background_x_offset[6]=background_x[6];background_y_offset[6]=background_y[6];
background_x_offset[7]=background_x[7];background_y_offset[7]=background_y[7];/*Initialize Background End*/

star_coin_count=1;
shake=false;
scrolling_left=0;
/*Checkpoint*/if global.x_checkpoint&gt;0 and global.y_checkpoint&gt;0{if asset_get_type("obj_checkpoint")==asset_object and instance_number(obj_checkpoint)&gt;0{
if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0{obj_player.x=global.x_checkpoint;obj_player.y=global.y_checkpoint;}
if asset_get_type("obj_camera")==asset_object and instance_number(obj_camera)&gt;0{obj_camera.x=global.x_checkpoint;obj_camera.y=global.y_checkpoint;obj_camera.xx=global.x_checkpoint;obj_camera.yy=global.y_checkpoint;}}}/*Checkpoint End*/
/*Assist Item*/if asset_get_type("obj_assist_item")==asset_object and asset_get_type("obj_player")==asset_object{if global.assist_item_appear&lt;10{if global.lives_until_assist&gt;=global.assist_item_appear or global.assist_item_appear&lt;=0{if instance_number(obj_assist_item)&lt;1 and instance_number(obj_player)&gt;0{with(instance_nearest(x,y,obj_player)){instance_create(x-32,y-128,obj_assist_item);}}}}}/*Assist Item End*/
/*Start Timer*/
time_second=0;
if instance_number(obj_player)&gt;0and instance_number(obj_player_map)&lt;1{if global.trigger_ending=false{
if global.x_checkpoint&gt;0 or global.y_checkpoint&gt;0{global.timeattack_realmillisecond=global.checkpoint_realmillisecond;global.timeattack_millisecond=global.checkpoint_millisecond;global.timeattack_second=global.checkpoint_second;global.timeattack_minute=global.checkpoint_minute;}
else{global.timeattack_realmillisecond=0;global.timeattack_millisecond=0;global.timeattack_second=0;global.timeattack_minute=0;}}}
//if global.x_checkpoint&gt;0{view_xview=global.x_checkpoint;}
//if global.y_checkpoint&gt;0{view_yview=global.y_checkpoint;}

//}

/*Virtual Controls*/
//display_set_gui_size(view_wview,view_hview);
//global.virtual_key_up=virtual_key_add(0,450,300,100,vk_up);
//global.virtual_key_left=virtual_key_add(0,450,100,300,vk_left);
//global.virtual_key_right=virtual_key_add(200,450,100,300,vk_right);
//global.virtual_key_down=virtual_key_add(0,650,300,100,vk_down);
//global.virtual_key_a=virtual_key_add(1200,450,200,300,vk_space);
//global.virtual_key_b=virtual_key_add(1100,450,200,300,vk_shift);
//virtual_key_show(global.virtual_key_up);
//virtual_key_show(global.virtual_key_left);
//virtual_key_show(global.virtual_key_right);
//virtual_key_show(global.virtual_key_down);
//virtual_key_show(global.virtual_key_a);
//virtual_key_show(global.virtual_key_b);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save whole level as png file
/*if keyboard_check_pressed(ord("P")){
save_level_as_png=true;
global.show_tutorial_signs=false;
set_view_size=false;allow_iris=false;
var sprite;
view_xview[0]=0;
view_yview[0]=0;
view_wview[0]=room_width;
view_hview[0]=room_height;
window_set_rectangle(0,0,room_width,room_height);
surface_resize(application_surface,room_width,room_height)
sprite=sprite_create_from_surface(application_surface,0,0,room_width,room_height,false,false,0,0);
sprite_save(sprite,0,string(room_get_name(room))+"_Map.png");
sprite_delete(sprite);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
if instance_number(obj_title)&lt;=0{
/*Show HUD timers*/

/*If HUD show timer is set to always hide*/if global.hud_show_timer&lt;=0{global.hud_show_lives=false;global.hud_show_coins=false;global.hud_show_starcoins=false;global.hud_show_score=false;}/*If HUD show timer is set to always hide*/
/*If HUD show timer is set to never hide*/if global.hud_show_timer&gt;=600{global.hud_show_lives=true;global.hud_show_coins=true;global.hud_show_starcoins=true;global.hud_show_score=true;}/*If HUD show timer is set to never hide*/

/*Show Lives*/
if asset_get_type("room_level_select")==asset_room and room=room_level_select{hud_show_lives=1;}else{
if global.hud_show_lives=true{hud_show_lives=lerp(hud_show_lives,1,0.1);if hud_show_lives_timer=1{global.hud_show_lives=false;}
if hud_show_lives_timer=0{hud_show_lives_timer=global.hud_show_timer;}}else{hud_show_lives=lerp(hud_show_lives,0,0.1);}
if hud_show_lives_timer&gt;0{hud_show_lives_timer-=1;}}/*Show Lives END*/
/*Show Coins*/if global.hud_show_coins=true{hud_show_coins=lerp(hud_show_coins,1,0.1);if hud_show_coins_timer=1{global.hud_show_coins=false;}
if hud_show_coins_timer=0{hud_show_coins_timer=global.hud_show_timer;}}else{hud_show_coins=lerp(hud_show_coins,0,0.1);}
if hud_show_coins_timer&gt;0{hud_show_coins_timer-=1;}/*Show Coins END*/
/*Show StarCoins*/if global.hud_show_starcoins=true{hud_show_starcoins=lerp(hud_show_starcoins,1,0.1);if hud_show_starcoins_timer=1{global.hud_show_starcoins=false;}
if hud_show_starcoins_timer=0{hud_show_starcoins_timer=global.hud_show_timer;}}else{hud_show_starcoins=lerp(hud_show_starcoins,0,0.1);}
if hud_show_starcoins_timer&gt;0{hud_show_starcoins_timer-=1;}/*Show StarCoins END*/
/*Show Score*/if global.hud_show_score=true{hud_show_score=lerp(hud_show_score,1,0.1);if hud_show_score_timer=1{global.hud_show_score=false;}
if hud_show_score_timer=0{hud_show_score_timer=global.hud_show_timer;}}else{hud_show_score=lerp(hud_show_score,0,0.1);}
if hud_show_score_timer&gt;0{hud_show_score_timer-=1;}/*Show StarCoins END*/
/*Show HUD timers END*/

/*Lives*/
draw_set_halign(fa_left);draw_set_valign(fa_center);
if global.character_for_player_1=0{if asset_get_type("spr_player_stand")==asset_sprite{draw_sprite_ext(spr_player_stand,0,32,hud_show_lives*32,0.5,0.5,0,c_white,hud_show_lives);}}
else if global.character_for_player_1=1{if asset_get_type("spr_catlyn_stand")==asset_sprite{draw_sprite_ext(spr_catlyn_stand,0,32,hud_show_lives*32,0.5,0.5,0,c_white,hud_show_lives);}}
if lives&lt;0{
draw_text_transformed_colour(64-2,hud_show_lives*24,"0",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64+2,hud_show_lives*24,"0",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24-2,"0",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24+2,"0",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24,"0",global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_lives);}
else
{draw_text_transformed_colour(64-2,hud_show_lives*24,lives,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64+2,hud_show_lives*24,lives,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24-2,lives,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24+2,lives,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_lives);
draw_text_transformed_colour(64,hud_show_lives*24,lives,global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_lives);}
/*Coins*/
draw_set_halign(fa_left);draw_set_valign(fa_center);
if asset_get_type("spr_coin")==asset_sprite{draw_sprite_ext(spr_coin,0,32,hud_show_coins*64,0.5,0.5,0,c_white,hud_show_coins);}
draw_text_transformed_colour(64-2,hud_show_coins*56,global.coins,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_coins);
draw_text_transformed_colour(64+2,hud_show_coins*56,global.coins,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_coins);
draw_text_transformed_colour(64,hud_show_coins*56-2,global.coins,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_coins);
draw_text_transformed_colour(64,hud_show_coins*56+2,global.coins,global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_coins);
draw_text_transformed_colour(64,hud_show_coins*56,global.coins,global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_coins);

/*Star Coins*/
if asset_get_type("spr_star_coin")==asset_sprite{
/*Star Coin 1*/if global.star_coin1=false{draw_sprite_ext(spr_star_coin,0,32,hud_show_starcoins*96,0.5,0.5,0,c_gray,hud_show_starcoins*0.5);}
else{draw_sprite_ext(spr_star_coin,0,32,hud_show_starcoins*96,0.5,0.5,0,c_white,hud_show_starcoins);}

/*Star Coin 2*/if global.star_coin2=false{draw_sprite_ext(spr_star_coin,0,32+32,hud_show_starcoins*96,0.5,0.5,0,c_gray,hud_show_starcoins*0.5);}
else{draw_sprite_ext(spr_star_coin,0,32+32,hud_show_starcoins*96,0.5,0.5,0,c_white,hud_show_starcoins);}

/*Star Coin 3*/if global.star_coin3=false{draw_sprite_ext(spr_star_coin,0,32+64,hud_show_starcoins*96,0.5,0.5,0,c_gray,hud_show_starcoins*0.5);}
else{draw_sprite_ext(spr_star_coin,0,32+64,hud_show_starcoins*96,0.5,0.5,0,c_white,hud_show_starcoins);}

/*Star Coin 4*/if global.star_coin4=false{draw_sprite_ext(spr_star_coin,0,32+96,hud_show_starcoins*96,0.5,0.5,0,c_gray,hud_show_starcoins*0.5);}
else{draw_sprite_ext(spr_star_coin,0,32+96,hud_show_starcoins*96,0.5,0.5,0,c_white,hud_show_starcoins);}

/*Star Coin 5*/if global.star_coin5=false{draw_sprite_ext(spr_star_coin,0,32+128,hud_show_starcoins*96,0.5,0.5,0,c_gray,hud_show_starcoins*0.5);}
else{draw_sprite_ext(spr_star_coin,0,32+128,hud_show_starcoins*96,0.5,0.5,0,c_white,hud_show_starcoins);}}

/*Score*/
draw_set_halign(fa_right);draw_set_valign(fa_center);
draw_text_transformed_colour(set_view_wview+200-2,hud_show_score*32,"SCORE#"+string(score),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_score);
draw_text_transformed_colour(set_view_wview+202,hud_show_score*32,"SCORE#"+string(score),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_score);
draw_text_transformed_colour(set_view_wview+200,hud_show_score*32-2,"SCORE#"+string(score),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_score);
draw_text_transformed_colour(set_view_wview+200,hud_show_score*32+2,"SCORE#"+string(score),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,hud_show_score);
draw_text_transformed_colour(set_view_wview+200,hud_show_score*32,"SCORE#"+string(score),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,hud_show_score);

/*Time Countdown*/
if instance_number(obj_player)&gt;0 or instance_number(obj_player_die)&gt;0{

/*Time is running out message*/
if global.player_has_entered_goal=false
{if global.time_countdown&lt;=99 and global.time_countdown&gt;=95{draw_set_halign(fa_center);draw_set_valign(fa_center);
draw_text_transformed_colour(view_wview/2-2,view_hview/2,"TIME IS RUNNING OUT!",2,2,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(view_wview/2+2,view_hview/2,"TIME IS RUNNING OUT!",2,2,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(view_wview/2,view_hview/2-2,"TIME IS RUNNING OUT!",2,2,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(view_wview/2,view_hview/2+2,"TIME IS RUNNING OUT!",2,2,0,c_black,c_black,c_black,c_black,1);
if global.time_countdown&lt;=99 and global.timeattack_millisecond&lt;room_speed/2{draw_text_transformed_colour(view_wview/2,view_hview/2,"TIME IS RUNNING OUT!",2,2,0,c_red,c_red,c_red,c_red,1);}
else{draw_text_transformed_colour(view_wview/2,view_hview/2,"TIME IS RUNNING OUT!",2,2,0,c_white,c_white,c_white,c_white,1);}
}}

if global.hud_show_timer&gt;0{draw_set_halign(fa_right);draw_set_valign(fa_center);
draw_text_transformed_colour(set_view_wview+400-32-2,32,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32+2,32,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32,32-2,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32,32+2,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);

if global.player_has_entered_goal=false
{if global.time_countdown&lt;=99 and global.timeattack_millisecond&lt;room_speed/2{draw_text_transformed_colour(set_view_wview+400-32,32,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,1);}
else{draw_text_transformed_colour(set_view_wview+400-32,32,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,1);}}
else{draw_text_transformed_colour(set_view_wview+400-32,32,"TIME#"+string(global.time_countdown),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,1);}


/*Time in Minutes, Seconds and Milliseconds*/
draw_text_transformed_colour(set_view_wview+400-32-2,64,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32+2,64,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32,64-2,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(set_view_wview+400-32,64+2,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);

if global.player_has_entered_goal=false
{if global.time_countdown&lt;=99 and global.timeattack_millisecond&lt;room_speed/2{draw_text_transformed_colour(set_view_wview+400-32,64,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,1);}
else{draw_text_transformed_colour(set_view_wview+400-32,64,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,1);}}
else{draw_text_transformed_colour(set_view_wview+400-32,64,string(global.timeattack_minute)+":"+string(global.timeattack_second)+"."+string(global.timeattack_millisecond),global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,1);}
}}/*Time Countdown END*/

}

/*Show FPS Options*/if global.show_fps=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
draw_text_transformed_colour(30-2,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(32,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,100-2,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,100+2,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
if fps&gt;=60{draw_text_transformed_colour(30,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,1);}
else if fps&gt;=50{draw_text_transformed_colour(30,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,1);}
else if fps&gt;=40{draw_text_transformed_colour(30,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_orange,c_orange,c_orange,c_orange,1);}
else{draw_text_transformed_colour(30,100,"FPS: "+string(fps)+" / "+string(room_speed),global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,1);}
}/*Show FPS Options End*/

/*________________________________________________________________________________________________________________________________________________________________________________________________________________________*/

///Show Controls
if os_type!=os_ios and os_type!=os_android{
if global.playergame=0{

/*SINGLEPLAYER PLAYER 1*/
if player1&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and global.player1_show_controls&gt;=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Left Key*/
draw_text_transformed_colour(30-2,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(32,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-2,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32+2,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,4,150,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_left,150,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Left Key End*/

/*Show Right Key*/
draw_text_transformed_colour(180-2,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(182,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-2,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32+2,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,6,320,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_right,320,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Right Key End*/

/*Show Pounce Key*/
draw_text_transformed_colour(350-2,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(352,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-2,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32+2,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,2,450,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_dash,450,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Pounce Key End*/

/*Show Jump Key*/
draw_text_transformed_colour(480-2,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(482,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-2,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32+2,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_white,c_white,c_white,c_white,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,0,560,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_jump,560,set_view_hview+250-32,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Jump Key End*/

}}

else if global.playergame&gt;0{

/*MULTIPLAYER PLAYER 1*/
if player1&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and global.player1_show_controls&gt;=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Left Key*/
draw_text_transformed_colour(30-2,set_view_hview+250-32-96,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(32,set_view_hview+250-32-96,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-2-96,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32+2-96,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-96,"Move Left:",global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,4,150,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_left,150,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Left Key End*/

/*Show Right Key*/
draw_text_transformed_colour(180-2,set_view_hview+250-32-96,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(182,set_view_hview+250-32-96,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-2-96,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32+2-96,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-96,"Move Right:",global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,6,320,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_right,320,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Right Key End*/

/*Show Pounce Key*/
draw_text_transformed_colour(350-2,set_view_hview+250-32-96,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(352,set_view_hview+250-32-96,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-2-96,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32+2-96,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-96,"Pounce:",global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,2,450,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_dash,450,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Pounce Key End*/

/*Show Jump Key*/
draw_text_transformed_colour(480-2,set_view_hview+250-32-96,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(482,set_view_hview+250-32-96,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-2-96,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32+2-96,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player1_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-96,"Jump:",global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,player1_show_controls_alpha);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,0,560,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_jump,560,set_view_hview+250-32-96,0.5,0.5,0,c_white,player1_show_controls_alpha);}/*Show Jump Key End*/

}
else if player1=noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and/*global.player1_show_controls=true and*/ lives&gt;0{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Join Game Key*/
if can_spawn_player=true{
draw_text_transformed_colour(30-2,set_view_hview+250-32-96,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(32,set_view_hview+250-32-96,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-2-96,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32+2-96,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-96,"Join Game:",global.default_text_size,global.default_text_size,0,c_red,c_red,c_red,c_red,1);
if gamepad_is_connected(0){draw_sprite_ext(spr_xbox_buttons,0,160,set_view_hview+250-32-96,0.5,0.5,0,c_white,1);}
else{draw_sprite_ext(spr_keyboard_keys,global.player1_key_jump,160,set_view_hview+250-32-96,0.5,0.5,0,c_white,1);}}}/*Show Join Game Key End*/

/*MULTIPLAYER PLAYER 2*/
if player2&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and global.player2_show_controls&gt;=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Left Key*/
draw_text_transformed_colour(30-2,set_view_hview+250-32-64,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(32,set_view_hview+250-32-64,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-2-64,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32+2-64,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-64,"Move Left:",global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,player2_show_controls_alpha);
if gamepad_is_connected(1){draw_sprite_ext(spr_xbox_buttons,4,150,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player2_key_left,150,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}/*Show Left Key End*/

/*Show Right Key*/
draw_text_transformed_colour(180-2,set_view_hview+250-32-64,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(182,set_view_hview+250-32-64,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-2-64,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32+2-64,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-64,"Move Right:",global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,player2_show_controls_alpha);
if gamepad_is_connected(1){draw_sprite_ext(spr_xbox_buttons,6,320,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player2_key_right,320,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}/*Show Right Key End*/

/*Show Pounce Key*/
draw_text_transformed_colour(350-2,set_view_hview+250-32-64,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(352,set_view_hview+250-32-64,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-2-64,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32+2-64,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-64,"Pounce:",global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,player2_show_controls_alpha);
if gamepad_is_connected(1){draw_sprite_ext(spr_xbox_buttons,2,450,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player2_key_dash,450,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}/*Show Pounce Key End*/

/*Show Jump Key*/
draw_text_transformed_colour(480-2,set_view_hview+250-32-64,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(482,set_view_hview+250-32-64,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-2-64,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32+2-64,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player2_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-64,"Jump:",global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,player2_show_controls_alpha);
if gamepad_is_connected(1){draw_sprite_ext(spr_xbox_buttons,0,560,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player2_key_jump,560,set_view_hview+250-32-64,0.5,0.5,0,c_white,player2_show_controls_alpha);}/*Show Jump Key End*/

}
else if player2=noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and/*global.player2_show_controls=true and lives&gt;0 and*/ global.playergame&gt;0{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Join Game Key*/
if can_spawn_player=true{
draw_text_transformed_colour(30-2,set_view_hview+250-32-64,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(32,set_view_hview+250-32-64,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-2-64,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32+2-64,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-64,"Join Game:",global.default_text_size,global.default_text_size,0,c_lime,c_lime,c_lime,c_lime,1);
if gamepad_is_connected(1){draw_sprite_ext(spr_xbox_buttons,0,160,set_view_hview+250-32-64,0.5,0.5,0,c_white,1);}
else{draw_sprite_ext(spr_keyboard_keys,global.player2_key_jump,160,set_view_hview+250-32-64,0.5,0.5,0,c_white,1);}}}/*Show Join Game Key End*/


/*MULTIPLAYER PLAYER 3*/
if player3&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and global.player3_show_controls&gt;=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Left Key*/
draw_text_transformed_colour(30-2,set_view_hview+250-32-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(32,set_view_hview+250-32-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-2-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32+2-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,player3_show_controls_alpha);
if gamepad_is_connected(2){draw_sprite_ext(spr_xbox_buttons,4,150,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player3_key_left,150,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}/*Show Left Key End*/

/*Show Right Key*/
draw_text_transformed_colour(180-2,set_view_hview+250-32-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(182,set_view_hview+250-32-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-2-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32+2-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,player3_show_controls_alpha);
if gamepad_is_connected(2){draw_sprite_ext(spr_xbox_buttons,6,320,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player3_key_right,320,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}/*Show Right Key End*/

/*Show Pounce Key*/
draw_text_transformed_colour(350-2,set_view_hview+250-32-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(352,set_view_hview+250-32-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-2-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32+2-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,player3_show_controls_alpha);
if gamepad_is_connected(2){draw_sprite_ext(spr_xbox_buttons,2,450,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player3_key_dash,450,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}/*Show Pounce Key End*/

/*Show Jump Key*/
draw_text_transformed_colour(480-2,set_view_hview+250-32-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(482,set_view_hview+250-32-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-2-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32+2-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player3_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-32,"Jump:",global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,player3_show_controls_alpha);
if gamepad_is_connected(2){draw_sprite_ext(spr_xbox_buttons,0,560,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player3_key_jump,560,set_view_hview+250-32-32,0.5,0.5,0,c_white,player3_show_controls_alpha);}/*Show Jump Key End*/

}
else if player3=noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and/*global.player3_show_controls=true and lives&gt;0 and*/ global.playergame&gt;1{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Join Game Key*/
if can_spawn_player=true{
draw_text_transformed_colour(30-2,set_view_hview+250-32-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(32,set_view_hview+250-32-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-2-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32+2-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_yellow,c_yellow,c_yellow,c_yellow,1);
if gamepad_is_connected(2){draw_sprite_ext(spr_xbox_buttons,0,160,set_view_hview+250-32-32,0.5,0.5,0,c_white,1);}
else{draw_sprite_ext(spr_keyboard_keys,global.player3_key_jump,160,set_view_hview+250-32-32,0.5,0.5,0,c_white,1);}}}/*Show Join Game Key End*/


/*MULTIPLAYER PLAYER 4*/
if player4&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and global.player4_show_controls&gt;=true{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Left Key*/
draw_text_transformed_colour(30-2,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(32,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32-2,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32+2,"Move Left:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(30,set_view_hview+250-32,"Move Left:",global.default_text_size,global.default_text_size,0,c_aqua,c_aqua,c_aqua,c_aqua,player4_show_controls_alpha);
if gamepad_is_connected(3){draw_sprite_ext(spr_xbox_buttons,4,150,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player4_key_left,150,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}/*Show Left Key End*/

/*Show Right Key*/
draw_text_transformed_colour(180-2,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(182,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32-2,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32+2,"Move Right:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(180,set_view_hview+250-32,"Move Right:",global.default_text_size,global.default_text_size,0,c_aqua,c_aqua,c_aqua,c_aqua,player4_show_controls_alpha);
if gamepad_is_connected(3){draw_sprite_ext(spr_xbox_buttons,6,320,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player4_key_right,320,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}/*Show Right Key End*/

/*Show Pounce Key*/
draw_text_transformed_colour(350-2,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(352,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32-2,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32+2,"Pounce:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(350,set_view_hview+250-32,"Pounce:",global.default_text_size,global.default_text_size,0,c_aqua,c_aqua,c_aqua,c_aqua,player4_show_controls_alpha);
if gamepad_is_connected(3){draw_sprite_ext(spr_xbox_buttons,2,450,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player4_key_dash,450,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}/*Show Pounce Key End*/

/*Show Jump Key*/
draw_text_transformed_colour(480-2,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(482,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32-2,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32+2,"Jump:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,player4_show_controls_alpha);
draw_text_transformed_colour(480,set_view_hview+250-32,"Jump:",global.default_text_size,global.default_text_size,0,c_aqua,c_aqua,c_aqua,c_aqua,player4_show_controls_alpha);
if gamepad_is_connected(3){draw_sprite_ext(spr_xbox_buttons,0,560,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}
else{draw_sprite_ext(spr_keyboard_keys,global.player4_key_jump,560,set_view_hview+250-32,0.5,0.5,0,c_white,player4_show_controls_alpha);}/*Show Jump Key End*/

}
else if player4=noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and/*global.player4_show_controls=true and lives&gt;0 and*/ global.playergame&gt;2{
draw_set_halign(fa_left);draw_set_valign(fa_center);
/*Show Join Game Key*/
if can_spawn_player=true{
draw_text_transformed_colour(30-2,set_view_hview+250-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(32,set_view_hview+250-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32-2,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32+2,"Join Game:",global.default_text_size,global.default_text_size,0,c_black,c_black,c_black,c_black,1);
draw_text_transformed_colour(30,set_view_hview+250-32,"Join Game:",global.default_text_size,global.default_text_size,0,c_aqua,c_aqua,c_aqua,c_aqua,1);
if gamepad_is_connected(3){draw_sprite_ext(spr_xbox_buttons,0,160,set_view_hview+250-32,0.5,0.5,0,c_white,1);}
else{draw_sprite_ext(spr_keyboard_keys,global.player4_key_jump,160,set_view_hview+250-32,0.5,0.5,0,c_white,1);}}}/*Show Join Game Key End*/

}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Camera Object*/

/*Create Event*/
//xx=x;yy=y;
//iris_xscale=0;iris_yscale=0;
//iris_zoom=0;
//view_wview=640+400;
//view_hview=480;

/*Step Event*/

/*Add more players*/
if lives&gt;0 and instance_number(obj_player)&gt;0and asset_get_type("obj_player_die")==asset_object and instance_number(obj_player_die)&lt;1and instance_number(obj_player_map)&lt;1{
/*Spawn Players*/

/*Make sure the lives counter never goes below 0*/if lives&lt;0{lives=0;}/*Make sure the lives counter never goes below 0 END*/

with(obj_player){if!place_meeting(x,y,obj_wall)and!place_meeting(x,y-16,obj_wall)and asset_get_type("room_ending_cutscene")==asset_room and room!=room_ending_cutscene{obj_camera.can_spawn_player=true;}else{obj_camera.can_spawn_player=false;}}

if instance_number(obj_chair_and_table)&lt;1{
if gamepad_button_check_pressed(0,gp_face1)or keyboard_check_pressed(global.player1_key_jump){if player1=noone and can_spawn_player=true{if global.playergame&lt;0{global.playergame=0;}player1=instance_create(obj_player.x,obj_player.y,obj_player)with(player1){player=1;}}}
if gamepad_button_check_pressed(1,gp_face1)or keyboard_check_pressed(global.player2_key_jump){if player2=noone and can_spawn_player=true{if global.playergame&lt;1{global.playergame=1;}player2=instance_create(obj_player.x,obj_player.y,obj_player)with(player2){player=2;}}}
if gamepad_button_check_pressed(2,gp_face1)or keyboard_check_pressed(global.player3_key_jump){if player3=noone and can_spawn_player=true{if global.playergame&lt;2{global.playergame=2;}player3=instance_create(obj_player.x,obj_player.y,obj_player)with(player3){player=3;}}}
if gamepad_button_check_pressed(3,gp_face1)or keyboard_check_pressed(global.player4_key_jump){if player4=noone and can_spawn_player=true{if global.playergame&lt;3{global.playergame=3;}player4=instance_create(obj_player.x,obj_player.y,obj_player)with(player4){player=4;}}}
}
/*Spawn Players End*/
}

/*Timer Countup*/
if asset_get_type("obj_goal")==asset_object and instance_number(obj_goal)&gt;0 and obj_goal.goal=false and 
asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and obj_player.allow_timeattack=true{
if instance_number(obj_player)&gt;0{global.timeattack_millisecond+=1;}

global.timeattack_realmillisecond+=1;if global.timeattack_millisecond&gt;60{global.timeattack_millisecond=0;global.timeattack_second+=1;}if global.timeattack_second&gt;59{global.timeattack_millisecond=0;global.timeattack_second=0;global.timeattack_minute+=1;}}
else if asset_get_type("obj_goal")==asset_object and instance_number(obj_goal)&gt;0 and obj_goal.goal=false or instance_number(obj_goal)&lt;1
{if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and obj_player.allow_timeattack=true{
if instance_number(obj_player)&gt;0{global.timeattack_millisecond+=1;}
global.timeattack_realmillisecond+=1;if global.timeattack_millisecond&gt;60{global.timeattack_millisecond=0;global.timeattack_second+=1;}if global.timeattack_second&gt;59{global.timeattack_millisecond=0;global.timeattack_second=0;global.timeattack_minute+=1;}}}/*Timer Countup*/

/*Time Countdown*/if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and obj_player.allow_timeup=true{
if asset_get_type("obj_goal")==asset_object and instance_number(obj_goal)&gt;0 and obj_goal.goal=false or instance_number(obj_goal)&lt;1{
time_second+=1;if time_second&gt;room_speed{time_second=0;global.time_countdown-=1;}}}/*Time Countdown END*/

//depth=-y-room_height*room_width;
/*Room Speed*/room_speed=global.max_fps;/*Room Speed END*/
if asset_get_type("spr_coin")==asset_sprite{sprite_index=spr_coin;}image_speed=0.1;
global.spikes_emerge_time+=1;
if global.spikes_emerge_time&gt;=room_speed*6{global.spikes_emerge_time=0;}
/*Simple Controls, stop the screen from scrolling left*/if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0and obj_player.simple_controls=true{if x&gt;scrolling_left{scrolling_left=x;}if x&lt;scrolling_left{x=scrolling_left;}}

/*Fullscreen Toggle f4*/if keyboard_check_pressed(vk_f4){if window_get_fullscreen(){window_set_fullscreen(false);}else{window_set_fullscreen(true);}if(file_exists("Config.ini")){file_delete("Config.ini");}ini_open("Config.ini");ini_write_real("Config","fullscreen_mode",window_get_fullscreen());ini_close();}/*Fullscreen Toggle f4 END*/
/*Deactivate instances outside view*/instance_activate_all();
//instance_deactivate_region(view_xview-128,view_yview-128,view_xview+view_wview+256,view_yview+view_hview+256,false,true);
instance_deactivate_region(view_xview-228,view_yview-228,view_xview+view_wview+356,view_yview+view_hview+356,false,true);
if asset_get_type("obj_player")==asset_object{instance_activate_object(obj_player);}if asset_get_type("obj_player_die")==asset_object{instance_activate_object(obj_player_die);}
/*Activate objects that always should be active*/if asset_get_type("obj_level_map_mbb")==asset_object{instance_activate_object(obj_level_map_mbb);}if asset_get_type("obj_level_map_mbf")==asset_object{instance_activate_object(obj_level_map_mbf);}/*Activate objects that always should be active END*/

if save_level_as_png=false{
if shake&gt;0{
x=x+random_range(-shake,+shake);
y=y+random_range(-shake,+shake);
shake=lerp(shake,0,0.1);}

x=lerp(x,xx,0.1);
y=lerp(y,yy,0.1);

/*Smooth the camera out even more*/
view_wview=lerp(view_wview,view_wview_lerp,0.1);
view_hview=lerp(view_hview,view_hview_lerp,0.1);

/*Boss Battle Camera*/
if asset_get_type("obj_player")==asset_object and asset_get_type("obj_boss")==asset_object and instance_number(obj_player)&gt;0 and instance_number(obj_boss)&gt;0 and distance_to_object(obj_boss)&lt;1000{

view_wview_lerp=lerp(view_wview_lerp,set_view_wview,0.05);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview,0.05);/*0.0005*/

if player1&gt;noone{
xx=mean(player1.x,obj_boss.x);
yy=mean(player1.y,obj_boss.y);}
else if player2&gt;noone{
xx=mean(player2.x,obj_boss.x);
yy=mean(player2.y,obj_boss.y);}
else if player3&gt;noone{
xx=mean(player3.x,obj_boss.x);
yy=mean(player3.y,obj_boss.y);}
else if player4&gt;noone{
xx=mean(player4.x,obj_boss.x);
yy=mean(player4.y,obj_boss.y);}
}else

/*ONE PLAYER CAMERA*/
if asset_get_type("obj_player")==asset_object and instance_number(obj_player)=1{
/*Tries to be a bit ahead of player*/obj_camera.xx=instance_nearest(view_xview+view_wview,y,obj_player).x+instance_nearest(view_xview+view_wview,y,obj_player).hspeed*15;
with(instance_nearest(view_xview+view_wview,y,obj_player)){if(place_meeting(x,y+1,obj_wall)){obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y}
else if y&lt;view_yview+128{obj_camera.yy-=abs(instance_nearest(view_xview+view_wview,y,obj_player).vspeed);}}
if instance_nearest(view_xview+view_wview,y,obj_player).walljump=true or instance_nearest(view_xview+view_wview,y,obj_player).climb=true{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y}if instance_nearest(view_xview+view_wview,y,obj_player).y&gt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}

/*Follow Player in y position when doing specific things*/
/*When Player is in water*/with(instance_nearest(view_xview+view_wview,y,obj_player)){if asset_get_type("obj_water")==asset_object{if place_meeting(x,y,obj_water){if asset_get_type("obj_camera")==asset_object{if instance_nearest(view_xview+view_wview,y,obj_player).y&lt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}}}}}/*When Player is in water END*/
/*When Player climbing up wall*/with(instance_nearest(view_xview+view_wview,y,obj_player)){if sticktowall=true and allow_wallclimb=true{if asset_get_type("obj_camera")==asset_object{if instance_nearest(view_xview+view_wview,y,obj_player).y&lt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}}}}/*When Player climbing up wall END*/
/*When Player is jumping on springs*/with(instance_nearest(view_xview+view_wview,y,obj_player)){if spring=true{if asset_get_type("obj_camera")==asset_object{if instance_nearest(view_xview+view_wview,y,obj_player).y&lt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}}}}/*When Player is jumping on springs END*/
/*When Player is climbing*/with(instance_nearest(view_xview+view_wview,y,obj_player)){if climb=true{if asset_get_type("obj_camera")==asset_object{if instance_nearest(view_xview+view_wview,y,obj_player).y&lt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}}}}/*When Player is climbing END*/
/*When Player is climbing horizontal rope*/with(instance_nearest(view_xview+view_wview,y,obj_player)){if horizontal_rope_climb=true{if asset_get_type("obj_camera")==asset_object{if instance_nearest(view_xview+view_wview,y,obj_player).y&lt;view_yview+view_hview/2{obj_camera.yy=instance_nearest(view_xview+view_wview,y,obj_player).y;}}}}/*When Player is climbing horizontal rope END*/
/*Follow Player in y position when doing specific things END*/

view_wview_lerp=lerp(view_wview_lerp,set_view_wview,0.1);
view_hview_lerp=lerp(view_hview_lerp,set_view_hview,0.1);
}else/*ONE PLAYER CAMERA END*/

/*MULTIPLAYER CAMERA*/
if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;1{

/*1,2,3,4*/if player1&gt;noone and player2&gt;noone and player3&gt;noone and player4&gt;noone{
xx=mean(player1.x,player2.x,player3.x,player4.x);yy=mean(player1.y,player2.y,player3.y,player4.y);}
/*1,2,3*/else if player1&gt;noone and player2&gt;noone and player3&gt;noone{
xx=mean(player1.x,player2.x,player3.x);yy=mean(player1.y,player2.y,player3.y);}

/*1,2*/else if player1&gt;noone and player2&gt;noone{
xx=mean(player1.x,player2.x);yy=mean(player1.y,player2.y);}
/*1,3*/else if player1&gt;noone and player3&gt;noone{
xx=mean(player1.x,player3.x);yy=mean(player1.y,player3.y);}
/*1,4*/else if player1&gt;noone and player4&gt;noone{
xx=mean(player1.x,player4.x);yy=mean(player1.y,player4.y);}

/*2,1*/else if player2&gt;noone and player1&gt;noone{
xx=mean(player2.x,player1.x);yy=mean(player2.y,player1.y);}
/*2,3*/else if player2&gt;noone and player3&gt;noone{
xx=mean(player2.x,player3.x);yy=mean(player2.y,player3.y);}
/*2,4*/else if player2&gt;noone and player4&gt;noone{
xx=mean(player2.x,player4.x);yy=mean(player2.y,player4.y);}

/*3,1*/else if player3&gt;noone and player1&gt;noone{
xx=mean(player3.x,player1.x);yy=mean(player3.y,player1.y);}
/*3,2*/else if player3&gt;noone and player2&gt;noone{
xx=mean(player3.x,player2.x);yy=mean(player3.y,player2.y);}
/*3,4*/else if player3&gt;noone and player4&gt;noone{
xx=mean(player3.x,player4.x);yy=mean(player3.y,player4.y);}

/*4,1*/else if player4&gt;noone and player1&gt;noone{
xx=mean(player4.x,player1.x);yy=mean(player4.y,player1.y);}
/*4,2*/else if player4&gt;noone and player2&gt;noone{
xx=mean(player4.x,player2.x);yy=mean(player4.y,player2.y);}
/*4,3*/else if player4&gt;noone and player3&gt;noone{
xx=mean(player4.x,player3.x);yy=mean(player4.y,player3.y);}

/*Just in case something goes wrong, just follow one player*/
/*1*/else if player1&gt;noone{xx=player1.x;yy=player1.y;}
/*2*/else if player2&gt;noone{xx=player2.x;yy=player2.y;}
/*3*/else if player3&gt;noone{xx=player3.x;yy=player3.y;}
/*4*/else if player4&gt;noone{xx=player4.x;yy=player4.y;}

/*Zoom out view when players are going outside view*/
if instance_nearest(x,0,obj_player).y&lt;view_yview+32 and fps_real&gt;=60 or instance_nearest(x,room_height,obj_player).y&gt;view_yview+view_hview-32 and fps_real&gt;=60
{if room_width&gt;=set_view_wview*2and room_height&gt;=set_view_hview*2{
view_wview_lerp=lerp(view_wview_lerp,set_view_wview*2,0.05);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview*2,0.05);/*0.0005*/}
else{view_wview_lerp=lerp(view_wview_lerp,set_view_wview*1.59,0.05);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview*1.59,0.05);/*0.0005*/}}
else if instance_nearest(0,room_height/2,obj_player).x&lt;view_xview+view_wview/2-320 and instance_nearest(room_width,room_height/2,obj_player).x&gt;view_xview+view_wview/2+320 and fps_real&gt;=60
or instance_nearest(room_width/2,0,obj_player).y&lt;view_yview+view_hview/2-320 and instance_nearest(room_width/2,room_height,obj_player).y&gt;view_yview+view_hview/2+320 and fps_real&gt;=60
{if room_width&gt;=set_view_wview*2and room_height&gt;=set_view_hview*2{
view_wview_lerp=lerp(view_wview_lerp,set_view_wview*2,0.005);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview*2,0.005);/*0.0005*/}
else{view_wview_lerp=lerp(view_wview_lerp,set_view_wview*1.59,0.005);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview*1.59,0.005);/*0.0005*/}}
else{view_wview_lerp=lerp(view_wview_lerp,set_view_wview,0.005);/*0.0005*/
view_hview_lerp=lerp(view_hview_lerp,set_view_hview,0.005);/*0.0005*/}
}/*MULTIPLAYER CAMERA*/

else{if asset_get_type("obj_player_map")==asset_object{/*Map Player*/if instance_number(obj_player_map)&gt;0{obj_camera.xx=instance_nearest(x,y,obj_player_map).x;obj_camera.yy=instance_nearest(x,y,obj_player_map).y;}}}

/*Iris*/
if allow_iris=true{

/*Zoom In Player Goal*/
if asset_get_type("obj_player")==asset_object and asset_get_type("obj_goal")==asset_object and instance_number(obj_player)&gt;0 and instance_number(obj_goal)&gt;0
and instance_nearest(room_width,y,obj_player).goal=true and global.time_countdown&lt;=0{
if iris_zoom=1{
iris_xscale=lerp(iris_xscale,1,0.15);
iris_yscale=lerp(iris_yscale,1,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}
else{
iris_xscale=lerp(iris_xscale,0,0.15);
iris_yscale=lerp(iris_yscale,0,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}}
/*Zoom In  Player Goal End*/

/*Zoom In Player Map*/
else if asset_get_type("obj_player_map")==asset_object and instance_number(obj_player_map)&gt;0 and obj_player_map.entering_level=true{
if iris_zoom=1{
iris_xscale=lerp(iris_xscale,1,0.15);
iris_yscale=lerp(iris_yscale,1,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}
else{
iris_xscale=lerp(iris_xscale,0,0.15);
iris_yscale=lerp(iris_yscale,0,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}}
/*Zoom In  Player Map End*/

/*Zoom In Title Screen*/
else if asset_get_type("obj_title")==asset_object and instance_number(obj_title)&gt;0 and obj_title.menu_delay&gt;10{
if iris_zoom=1{
iris_xscale=lerp(iris_xscale,1,0.15);
iris_yscale=lerp(iris_yscale,1,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}
else
{iris_xscale=lerp(iris_xscale,0,0.15);
iris_yscale=lerp(iris_yscale,0,0.15);
if iris_xscale&lt;=1.1{iris_zoom=0;}}}
/*Zoom In Title Screen End*/

/*Zoom Out*/else if iris_zoom=0{
iris_xscale=lerp(iris_xscale,1,0.15);
iris_yscale=lerp(iris_yscale,1,0.15);
if iris_xscale&gt;=0.99{iris_zoom=1;}}
else{iris_xscale=lerp(iris_xscale,16,0.015);
iris_yscale=lerp(iris_yscale,16,0.015);
if iris_xscale&gt;=0.99{iris_zoom=1;}}
/*Zoom Out End*/
}

/*Draw Iris Transitions*/
if global.enable_transitions=true and global.play_edited_level=false and global.actually_play_edited_level=false
or global.enable_transitions=true and global.play_edited_level=true and global.actually_play_edited_level=true
{if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0{
if iris_xscale&lt;15{
if asset_get_type("spr_iris")==asset_sprite{draw_sprite_ext(spr_iris,image_index,instance_nearest(room_width,y,obj_player).x,instance_nearest(room_width,y,obj_player).y,iris_xscale,iris_yscale,image_angle,image_blend,image_alpha);}
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,instance_nearest(room_width,y,obj_player).y-iris_yscale*128,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview,instance_nearest(room_width,y,obj_player).x-iris_xscale*128,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(instance_nearest(room_width,y,obj_player).x+iris_xscale*128-1,view_yview,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,instance_nearest(room_width,y,obj_player).y+iris_yscale*128,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}}

else if asset_get_type("obj_player_map")==asset_object and instance_number(obj_player_map)&gt;0{
if iris_xscale&lt;15{
if asset_get_type("spr_iris")==asset_sprite{draw_sprite_ext(spr_iris,image_index,instance_nearest(x,y,obj_player_map).xx,instance_nearest(x,y,obj_player_map).yy,iris_xscale,iris_yscale,image_angle,image_blend,image_alpha);}
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,instance_nearest(x,y,obj_player_map).yy-iris_yscale*128,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview,instance_nearest(x,y,obj_player_map).xx-iris_xscale*128,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(instance_nearest(x,y,obj_player_map).xx+iris_xscale*128-1,view_yview,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,instance_nearest(x,y,obj_player_map).yy+iris_yscale*128,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}}

/*Intro Cutscene Player*/else if asset_get_type("obj_player_intro_cutscene")==asset_object and instance_number(obj_player_intro_cutscene)&gt;0{
if iris_xscale&lt;15{
if asset_get_type("spr_iris")==asset_sprite{draw_sprite_ext(spr_iris,image_index,instance_nearest(x,y,obj_player_intro_cutscene).x,instance_nearest(x,y,obj_player_intro_cutscene).y,iris_xscale,iris_yscale,image_angle,image_blend,image_alpha);}
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,instance_nearest(x,y,obj_player_intro_cutscene).y-iris_yscale*128,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview,instance_nearest(x,y,obj_player_intro_cutscene).x-iris_xscale*128,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(instance_nearest(x,y,obj_player_intro_cutscene).x+iris_xscale*128-1,view_yview,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,instance_nearest(x,y,obj_player_intro_cutscene).y+iris_yscale*128,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}}

/*Ending Cutscene Player*/else if asset_get_type("obj_player_ending_cutscene")==asset_object and instance_number(obj_player_ending_cutscene)&gt;0{
if iris_xscale&lt;15{
if asset_get_type("spr_iris")==asset_sprite{draw_sprite_ext(spr_iris,image_index,instance_nearest(x,y,obj_player_ending_cutscene).x,instance_nearest(x,y,obj_player_ending_cutscene).y,iris_xscale,iris_yscale,image_angle,image_blend,image_alpha);}
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,instance_nearest(x,y,obj_player_ending_cutscene).y-iris_yscale*128,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview,instance_nearest(x,y,obj_player_ending_cutscene).x-iris_xscale*128,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(instance_nearest(x,y,obj_player_ending_cutscene).x+iris_xscale*128-1,view_yview,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,instance_nearest(x,y,obj_player_ending_cutscene).y+iris_yscale*128,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}}

else if iris_xscale&lt;15{
if asset_get_type("spr_iris")==asset_sprite{draw_sprite_ext(spr_iris,image_index,view_xview+view_wview/2,view_yview+view_hview/2,iris_xscale,iris_yscale,image_angle,image_blend,image_alpha);}
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview/2-iris_yscale*128,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview/2-iris_xscale*128,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview+view_wview/2+iris_xscale*128-1,view_yview,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,view_yview+view_hview/2+iris_yscale*128,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}}}
/*Draw Iris Transitions END*/
/*Iris END*/

/*Parallax Scrolling Background*/
if room!=room_title
{
if asset_get_type("room_leveleditor")==asset_room and room=room_leveleditor
{background_x[0]=view_xview/3;background_y[0]=+view_yview/3;
background_x[1]=+view_xview/5;background_y[1]=+view_yview/5;
background_x[2]=+view_xview/7;background_y[2]=+view_yview/7;
background_x[3]=+view_xview/9;background_y[3]=+view_yview/9;}
else{
if room!=room_level_select{

background_x[0]=background_x_offset[0]+view_xview/3;background_y[0]=background_y_offset[0]+view_yview/3;
background_x[1]=background_x_offset[1]+view_xview/5;background_y[1]=background_y_offset[1]+view_yview/5;
background_x[2]=background_x_offset[2]+view_xview/7;background_y[2]=background_y_offset[2]+view_yview/7;
background_x[3]=background_x_offset[3]+view_xview/9;background_y[3]=background_y_offset[3]+view_yview/9;

}}
}
/*Parallax Scrolling Background End*/

/*Background Brightness Options*/
if global.background_brightness&lt;0{if asset_get_type("background_black")==asset_background{background_index[7]=background_black;background_visible[7]=true;background_alpha[7]=abs(global.background_brightness);background_foreground[7]=false;background_htiled[7]=true;background_vtiled[7]=true;background_xscale[7]=1*(room_width/background_width[7]);background_yscale[7]=1*(room_height/background_height[7]);}}
if global.background_brightness&gt;0{if asset_get_type("background_white")==asset_background{background_index[7]=background_white;background_visible[7]=true;background_alpha[7]=abs(global.background_brightness);background_foreground[7]=false;background_htiled[7]=true;background_vtiled[7]=true;background_xscale[7]=1*(room_width/background_width[7]);background_yscale[7]=1*(room_height/background_height[7]);}}

if global.enable_background_layer1=false or global.background_brightness=-1 or global.background_brightness=+1{background_visible[0]=false;}else{background_visible[0]=true;}
if global.enable_background_layer2=false or global.background_brightness=-1 or global.background_brightness=+1{background_visible[1]=false;}else{background_visible[1]=true;}
if global.enable_background_layer3=false or global.background_brightness=-1 or global.background_brightness=+1{background_visible[2]=false;}else{background_visible[2]=true;}
if global.enable_background_layer4=false or global.background_brightness=-1 or global.background_brightness=+1{background_visible[3]=false;}else{background_visible[3]=true;}

/*Letterboxing during cutscenes (when the player object is absent)*/ 
if show_letterbox&gt;0 and global.play_edited_level=false and global.actually_play_edited_level=false
or show_letterbox&gt;0 and global.play_edited_level=true and global.actually_play_edited_level=true
{draw_rectangle_colour(view_xview,view_yview,view_xview+view_wview,letterbox_top_y,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(view_xview,letterbox_bottom_y,view_xview+view_wview,view_yview+view_hview,c_black,c_black,c_black,c_black,false);}
if asset_get_type("obj_player")==asset_object and instance_number(obj_player)&lt;1
and asset_get_type("obj_player_map")==asset_object and instance_number(obj_player_map)&lt;1
and asset_get_type("obj_title")==asset_object and instance_number(obj_title)&lt;1
or asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0and obj_player.can_move=false
{letterbox_top_y=lerp(letterbox_top_y,view_yview+64,0.1);
letterbox_bottom_y=lerp(letterbox_bottom_y,view_yview+view_hview-64,0.1);
show_letterbox=60;}
else{letterbox_top_y=lerp(letterbox_top_y,view_yview,0.1);
letterbox_bottom_y=lerp(letterbox_bottom_y,view_yview+view_hview,0.1);
if show_letterbox&gt;0{show_letterbox-=1;}}

/*If window is focused, hide cursor*/if window_has_focus()and mouse_y&gt;view_yview+8{window_set_cursor(cr_none);}else{if!window_get_fullscreen(){window_set_cursor(cr_default);}}/*If window is focused, hide cursor END*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Rain Effect*/if global.weather="rain"{
if asset_get_type("snd_rain")==asset_sound{if!audio_is_playing(snd_rain){audio_play_sound(snd_rain,0,true);audio_sound_gain(snd_rain,global.sfx_volume,0);}}
if(floor(random(10-1))=0){effect_create_above(ef_rain,x,y,2,c_white);}}/*Rain Effect End*/

/*Virtual Key, iOS and Android*/if os_type==os_ios or os_type==os_android{
if iris_xscale&gt;0.25 and iris_yscale&gt;0.25{
if instance_number(obj_player)&gt;0 and obj_player.can_move=true or instance_number(obj_player_map)&gt;0 and obj_player_map.can_move=true or instance_number(obj_title)&gt;0{
display_set_gui_size(view_wview,view_hview);
virtual_key_add(global.mobile_joystick_x,global.mobile_joystick_y+150+25,300,400,global.player1_key_up);
virtual_key_add(global.mobile_joystick_x,global.mobile_joystick_y+450+25,125,400,global.player1_key_left);
virtual_key_add(global.mobile_joystick_x+200-25,global.mobile_joystick_y+450+25,400+25,400,global.player1_key_right);
virtual_key_add(global.mobile_joystick_x,global.mobile_joystick_y+650+25,300,200,global.player1_key_down);
virtual_key_add(1160,550,240,200,global.player1_key_jump);
if room!=room_level_select{virtual_key_add(1000,550,240,200,global.player1_key_dash);}
if room!=room_title{virtual_key_add(1100-128,0,400,128,vk_escape);}

if keyboard_check(global.player1_key_up){draw_sprite_ext(spr_virtual_key_up,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_up,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,1,1,0,c_white,0.5);}
if keyboard_check(global.player1_key_left){draw_sprite_ext(spr_virtual_key_left,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_left,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,1,1,0,c_white,0.5);}
if keyboard_check(global.player1_key_right){draw_sprite_ext(spr_virtual_key_right,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_right,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,1,1,0,c_white,0.5);}
if keyboard_check(global.player1_key_down){draw_sprite_ext(spr_virtual_key_down,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_down,0,view_xview+global.mobile_joystick_x+120+30,view_yview+global.mobile_joystick_y+450+250-100,1,1,0,c_white,0.5);}

if keyboard_check(global.player1_key_jump){draw_sprite_ext(spr_virtual_key_a,0,view_xview+1200+100,view_yview+450+250-50,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_a,0,view_xview+1200+100,view_yview+450+250-50,1,1,0,c_white,0.5);}
if keyboard_check(global.player1_key_dash){draw_sprite_ext(spr_virtual_key_b,0,view_xview+1100,view_yview+450+250-50,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_b,0,view_xview+1100,view_yview+450+250-50,1,1,0,c_white,0.5);}
if room!=room_title{if keyboard_check(vk_escape){draw_sprite_ext(spr_virtual_key_pause,0,view_xview+1100-64,view_yview+32,0.9,0.9,0,c_gray,0.5);}else{draw_sprite_ext(spr_virtual_key_pause,0,view_xview+1100-64,view_yview+32,1,1,0,c_white,0.5);}}
}}}/*Virtual Key, iOS and Android End*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multiplayer - Has pressed keys

/*Player 1 Show Controls HUD timer*/
if player1&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and iris_xscale&gt;=10{
if global.player1_show_controls=0 or obj_player.can_move=false{player1_show_controls_alpha=lerp(player1_show_controls_alpha,0,0.1);}else
if global.player1_show_controls&gt;=1 and global.player1_show_controls&lt;=9{
if player1_show_controls_timer&gt;=1{player1_show_controls_alpha=lerp(player1_show_controls_alpha,0,0.1);player1_show_controls_timer-=1;}
if player1_show_controls_timer&lt;=0{player1_show_controls_alpha=lerp(player1_show_controls_alpha,1,0.1);}}
if global.player1_show_controls=10{player1_show_controls_alpha=lerp(player1_show_controls_alpha,1,0.1);}

if(keyboard_check(global.player1_key_up))or(gamepad_button_check(0,gp_padu))or(gamepad_axis_value(0,gp_axislv)&lt;0)
or(keyboard_check(global.player1_key_left))or(gamepad_button_check(0,gp_padl))or(gamepad_axis_value(0,gp_axislh)&lt;0)
or(keyboard_check(global.player1_key_right))or(gamepad_button_check(0,gp_padr))or(gamepad_axis_value(0,gp_axislh)&gt;0)
or(keyboard_check(global.player1_key_down))or(gamepad_button_check(0,gp_padd))or(gamepad_axis_value(0,gp_axislv)&gt;0)
or(gamepad_button_check(0,gp_face1))or(gamepad_button_check(0,gp_face2))or(keyboard_check(global.player1_key_jump))
or(gamepad_button_check(0,gp_face3))or(gamepad_button_check(0,gp_face4))or(keyboard_check(global.player1_key_dash)){player1_show_controls_timer=room_speed*global.player1_show_controls;}
}else{player1_show_controls_alpha=lerp(player1_show_controls_alpha,0,0.1);player1_show_controls_timer=room_speed*global.player1_show_controls;}/*Player 1 Show Controls HUD timer*/

/*Player 2 Show Controls HUD timer*/
if player2&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and iris_xscale&gt;=10{
if global.player2_show_controls=0 or obj_player.can_move=false{player2_show_controls_alpha=lerp(player2_show_controls_alpha,0,0.1);}else
if global.player2_show_controls&gt;=1 and global.player2_show_controls&lt;=9{
if player2_show_controls_timer&gt;=1{player2_show_controls_alpha=lerp(player2_show_controls_alpha,0,0.1);player2_show_controls_timer-=1;}
if player2_show_controls_timer&lt;=0{player2_show_controls_alpha=lerp(player2_show_controls_alpha,1,0.1);}}else
if global.player2_show_controls=10{player2_show_controls_alpha=lerp(player2_show_controls_alpha,1,0.1);}

if(keyboard_check(global.player2_key_up))or(gamepad_button_check(1,gp_padu))or(gamepad_axis_value(1,gp_axislv)&lt;0)
or(keyboard_check(global.player2_key_left))or(gamepad_button_check(1,gp_padl))or(gamepad_axis_value(1,gp_axislh)&lt;0)
or(keyboard_check(global.player2_key_right))or(gamepad_button_check(1,gp_padr))or(gamepad_axis_value(1,gp_axislh)&gt;0)
or(keyboard_check(global.player2_key_down))or(gamepad_button_check(1,gp_padd))or(gamepad_axis_value(1,gp_axislv)&gt;0)
or(gamepad_button_check(1,gp_face1))or(gamepad_button_check(1,gp_face2))or(keyboard_check(global.player2_key_jump))
or(gamepad_button_check(1,gp_face3))or(gamepad_button_check(1,gp_face4))or(keyboard_check(global.player2_key_dash)){player2_show_controls_timer=room_speed*global.player2_show_controls;}
}else{player2_show_controls_alpha=lerp(player2_show_controls_alpha,0,0.1);player2_show_controls_timer=room_speed*global.player2_show_controls;}/*Player 2 Show Controls HUD timer*/

/*Player 3 Show Controls HUD timer*/
if player3&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and iris_xscale&gt;=10{
if global.player3_show_controls=0 or obj_player.can_move=false{player3_show_controls_alpha=lerp(player3_show_controls_alpha,0,0.1);}else
if global.player3_show_controls&gt;=1 and global.player3_show_controls&lt;=9{
if player3_show_controls_timer&gt;=1{player3_show_controls_alpha=lerp(player3_show_controls_alpha,0,0.1);player3_show_controls_timer-=1;}
if player3_show_controls_timer&lt;=0{player3_show_controls_alpha=lerp(player3_show_controls_alpha,1,0.1);}}else
if global.player3_show_controls=10{player3_show_controls_alpha=lerp(player3_show_controls_alpha,1,0.1);}

if(keyboard_check(global.player3_key_up))or(gamepad_button_check(2,gp_padu))or(gamepad_axis_value(2,gp_axislv)&lt;0)
or(keyboard_check(global.player3_key_left))or(gamepad_button_check(2,gp_padl))or(gamepad_axis_value(2,gp_axislh)&lt;0)
or(keyboard_check(global.player3_key_right))or(gamepad_button_check(2,gp_padr))or(gamepad_axis_value(2,gp_axislh)&gt;0)
or(keyboard_check(global.player3_key_down))or(gamepad_button_check(2,gp_padd))or(gamepad_axis_value(2,gp_axislv)&gt;0)
or(gamepad_button_check(2,gp_face1))or(gamepad_button_check(2,gp_face2))or(keyboard_check(global.player3_key_jump))
or(gamepad_button_check(2,gp_face3))or(gamepad_button_check(2,gp_face4))or(keyboard_check(global.player3_key_dash)){player3_show_controls_timer=room_speed*global.player3_show_controls;}
}else{player3_show_controls_alpha=lerp(player3_show_controls_alpha,0,0.1);player3_show_controls_timer=room_speed*global.player3_show_controls;}/*Player 3 Show Controls HUD timer*/

/*Player 4 Show Controls HUD timer*/
if player4&gt;noone and asset_get_type("obj_player")==asset_object and instance_number(obj_player)&gt;0 and iris_xscale&gt;=10{
if global.player4_show_controls=0 or obj_player.can_move=false{player4_show_controls_alpha=lerp(player4_show_controls_alpha,0,0.1);}else
if global.player4_show_controls&gt;=1 and global.player4_show_controls&lt;=9{
if player4_show_controls_timer&gt;=1{player4_show_controls_alpha=lerp(player4_show_controls_alpha,0,0.1);player4_show_controls_timer-=1;}
if player4_show_controls_timer&lt;=0{player4_show_controls_alpha=lerp(player4_show_controls_alpha,1,0.1);}}else
if global.player4_show_controls=10{player4_show_controls_alpha=lerp(player4_show_controls_alpha,1,0.1);}

if(keyboard_check(global.player4_key_up))or(gamepad_button_check(3,gp_padu))or(gamepad_axis_value(3,gp_axislv)&lt;0)
or(keyboard_check(global.player4_key_left))or(gamepad_button_check(3,gp_padl))or(gamepad_axis_value(3,gp_axislh)&lt;0)
or(keyboard_check(global.player4_key_right))or(gamepad_button_check(3,gp_padr))or(gamepad_axis_value(3,gp_axislh)&gt;0)
or(keyboard_check(global.player4_key_down))or(gamepad_button_check(3,gp_padd))or(gamepad_axis_value(3,gp_axislv)&gt;0)
or(gamepad_button_check(3,gp_face1))or(gamepad_button_check(3,gp_face2))or(keyboard_check(global.player4_key_jump))
or(gamepad_button_check(3,gp_face3))or(gamepad_button_check(3,gp_face4))or(keyboard_check(global.player4_key_dash)){player4_show_controls_timer=room_speed*global.player4_show_controls;}
}else{player4_show_controls_alpha=lerp(player4_show_controls_alpha,0,0.1);player4_show_controls_timer=room_speed*global.player4_show_controls;}/*Player 4 Show Controls HUD timer*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fix Player not spawning in level editor
/*The player doesn't spawn when you simply try to playtest in the level editor, don't know why this is happening, but doing this code in a step/draw event fixes it for now. Will have to look into this more at another time*/
//draw_set_colour(c_black);
//draw_text(view_xview+32,view_yview+32,"How many players: "+string(instance_number(obj_player)));
//draw_text(view_xview+32,view_yview+64,"How many cameras: "+string(instance_number(obj_camera)));
//draw_text(view_xview+32,view_yview+96,"Player has spawned: "+string(player_has_spawned));

if player_has_spawned=false and room=room_leveleditor and instance_number(obj_player)&lt;=0{
if asset_get_type("obj_player_map")==asset_object and instance_number(obj_player_map)&lt;1and asset_get_type("obj_player_ending_cutscene")==asset_object and instance_number(obj_player_ending_cutscene)&lt;1{
if global.playergame&gt;=0{player1=instance_create(x,y,obj_player)with(player1){player=1;}}
if global.playergame&gt;=1{player2=instance_create(x-sprite_width/4,y,obj_player)with(player2){player=2;}}
if global.playergame&gt;=2{player3=instance_create(x-sprite_width*2/4,y,obj_player)with(player3){player=3;}}
if global.playergame&gt;=3{player4=instance_create(x-sprite_width*3/4,y,obj_player)with(player4){player=4;}}}/*Spawn Players End*/
player_has_spawned=true;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
